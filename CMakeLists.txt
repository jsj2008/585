cmake_minimum_required(VERSION 2.8)
PROJECT(585)

set(CMAKE_MODULE_PATH ${CMAKE_CURRENT_SOURCE_DIR})

#add_definitions(-W -Wall -ansi -pedantic -g)
#add_definitions(-W -Wall -ansi -O3)
#release mode
#add_definitions(-DRELEASE)

include_directories(${CMAKE_CURRENT_SOURCE_DIR})

FILE(GLOB RENDERER_SOURCES ${CMAKE_CURRENT_SOURCE_DIR}/Renderer/*.cpp)
FILE(GLOB RENDERER_HEADERS ${CMAKE_CURRENT_SOURCE_DIR}/Renderer/*.h)
FILE(GLOB PHYSICS_SOURCES ${CMAKE_CURRENT_SOURCE_DIR}/Physics/*.cpp)
FILE(GLOB PHYSICS_HEADERS ${CMAKE_CURRENT_SOURCE_DIR}/Physics/*.h)
FILE(GLOB COMMON_SOURCES ${CMAKE_CURRENT_SOURCE_DIR}/Common/*.cpp)
FILE(GLOB COMMON_HEADERS ${CMAKE_CURRENT_SOURCE_DIR}/Common/*.h)
FILE(GLOB MAIN_SOURCES ${CMAKE_CURRENT_SOURCE_DIR}/Main/*.cpp)
FILE(GLOB MAIN_HEADERS ${CMAKE_CURRENT_SOURCE_DIR}/Main/*.h)
FILE(GLOB UI_SOURCES ${CMAKE_CURRENT_SOURCE_DIR}/UI/*.cpp)
FILE(GLOB UI_HEADERS ${CMAKE_CURRENT_SOURCE_DIR}/UI/*.h)
FILE(GLOB XML_SOURCES ${CMAKE_CURRENT_SOURCE_DIR}/Tinyxml/*.cpp)
FILE(GLOB XML_HEADERS ${CMAKE_CURRENT_SOURCE_DIR}/Tinyxml/*.h)
FILE(GLOB DRIVING_SOURCES ${CMAKE_CURRENT_SOURCE_DIR}/Driving/*.cpp)
FILE(GLOB DRIVING_HEADERS ${CMAKE_CURRENT_SOURCE_DIR}/Driving/*.h)
FILE(GLOB AI_SOURCES ${CMAKE_CURRENT_SOURCE_DIR}/AI/*.cpp)
FILE(GLOB AI_HEADERS ${CMAKE_CURRENT_SOURCE_DIR}/AI/*.h)
FILE(GLOB AUDIO_SOURCES ${CMAKE_CURRENT_SOURCE_DIR}/Audio/*.cpp)
FILE(GLOB AUDIO_HEADERS ${CMAKE_CURRENT_SOURCE_DIR}/Audio/*.h)
FILE(GLOB AL_SOURCES ${CMAKE_CURRENT_SOURCE_DIR}/sound_dependencies/*.cpp)
FILE(GLOB AL ${CMAKE_CURRENT_SOURCE_DIR}/sound_dependencies/*.h)


set(SOURCES ${XML_SOURCES} ${UI_SOURCES} ${MAIN_SOURCES} ${RENDERER_SOURCES} ${PHYSICS_SOURCES} ${COMMON_SOURCES} ${DRIVING_SOURCES} ${AI_SOURCES} ${AL_SOURCES} ${AUDIO_SOURCES} main.cpp)
set(HEADERS ${XML_HEADERS} ${UI_HEADERS} ${MAIN_HEADERS} ${RENDERER_HEADERS} ${PHYSICS_HEADERS} ${COMMON_HEADERS} ${DRIVING_HEADERS} ${AI_HEADERS} ${AL_HEADERS} ${AUDIO_HEADERS})

SOURCE_GROUP("Renderer\\Include" FILES ${RENDERER_HEADERS})
SOURCE_GROUP("Renderer\\Src" FILES ${RENDERER_SOURCES})

SOURCE_GROUP("Physics\\Include" FILES ${PHYSICS_HEADERS})
SOURCE_GROUP("Physics\\Src" FILES ${PHYSICS_SOURCES})

SOURCE_GROUP("Common\\Include" FILES ${COMMON_HEADERS})
SOURCE_GROUP("Common\\Src" FILES ${COMMON_SOURCES})

SOURCE_GROUP("Main\\Include" FILES ${MAIN_HEADERS})
SOURCE_GROUP("Main\\Src" FILES ${MAIN_SOURCES})

SOURCE_GROUP("UI\\Include" FILES ${UI_HEADERS})
SOURCE_GROUP("UI\\Src" FILES ${UI_SOURCES})

SOURCE_GROUP("Tinyxml\\Include" FILES ${XML_HEADERS})
SOURCE_GROUP("Tinyxml\\Src" FILES ${XML_SOURCES})

SOURCE_GROUP("Driving\\Include" FILES ${DRIVING_HEADERS})
SOURCE_GROUP("Driving\\Src" FILES ${DRIVING_SOURCES})

SOURCE_GROUP("Driving\\Include" FILES ${AI_HEADERS})
SOURCE_GROUP("Driving\\Src" FILES ${AI_SOURCES})

SOURCE_GROUP("Audio\\Include" FILES ${AUDIO_HEADERS})
SOURCE_GROUP("Audio\\Src" FILES ${AUDIO_SOURCES})

SOURCE_GROUP("AI\\Include" FILES ${AI_HEADERS})
SOURCE_GROUP("AI\\Src" FILES ${AI_SOURCES})


#OpenGL
find_package(OpenGL)
include_directories(${OPENGL_INCLUDE_DIR})

#GLEW
find_package(Glew)
include_directories(${GLEW_INCLUDE_PATH})

#bullet
find_package(Bullet REQUIRED)
include_directories(${BULLET_INCLUDE_DIR})

#SDL
find_package(SDL REQUIRED)
find_package(SDL)
find_package(SDL_IMAGE)
include_directories(${SDL_INCLUDE_DIR} ${SDLIMAGE_INCLUDE_DIR})

#OPEN_AL
find_package(OPENAL REQUIRED)
include_directories(${OPENAL_INCLUDE_DIR})


ADD_EXECUTABLE(game ${SOURCES} ${HEADERS})
TARGET_LINK_LIBRARIES(game ${GLEW_LIBRARY} ${SDL_LIBRARY} ${SDLIMAGE_LIBRARY} ${OPENGL_LIBRARIES} ${BULLET_LIBRARIES} ${OPENAL_LIBRARY})